<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hot-reloading | Tomasz Janek]]></title>
  <link href="http://tomaszjanek.pl/blog/categories/hot-reloading/atom.xml" rel="self"/>
  <link href="http://tomaszjanek.pl/"/>
  <updated>2015-02-03T12:27:15+01:00</updated>
  <id>http://tomaszjanek.pl/</id>
  <author>
    <name><![CDATA[Tomasz Janek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hot reloading classes in Spring Boot with Spring Loaded, IntelliJ and Gradle]]></title>
    <link href="http://tomaszjanek.pl/blog/2015/02/03/hot-reloading-in-spring-boot-with-spring-loaded/"/>
    <updated>2015-02-03T11:40:08+01:00</updated>
    <id>http://tomaszjanek.pl/blog/2015/02/03/hot-reloading-in-spring-boot-with-spring-loaded</id>
    <content type="html"><![CDATA[<p> Actually almost all modern IDEs (IntelliJ, Eclipse, etc.) gives you support for
 reloading classes without need to restart the whole application
 using of JDK <code>HotSwap</code> mechanism.</p>

<p> Unfortunately, HotSwap has limitations and can reload only changes in method bodies
 and don&rsquo;t support changing method or class signatures ( <em>at the moment</em> ).</p>

<h3>Spring Loaded to the rescue</h3>

<p> <a href="https://github.com/spring-projects/spring-loaded">Spring Loaded</a> is a JVM agent that is actually used as reloading system in <code>Grails 2.x</code> and
 has no restrictions to reload changes only in method bodies like HotSwap in JDK.
 It&rsquo;s supports adding, modifying and removing fields, methods, annotations and values in enum out of the box.</p>

<h3>Configuring Spring Loaded with Spring Boot and Gradle in IntelliJ</h3>

<p> First of all, we need to setup <code>Spring Loaded</code> as build script for Gradle.
 Second, we need enable <code>idea</code> plugin and change default output directory for compiled classes for IntelliJ.
 If you don&rsquo;t do that, Gradle and IntelliJ will compile classes into a different locations, so it will cause Spring Loaded to fail.</p>

<p> Also be sure that IntelliJ and Gradle use the same Java versions for compiling classes.
 Setup Java SDK same as Gradle in IntelliJ project structure, otherwise you get a exception when Spring Loaded try to reload a new compiled classes.</p>

<p> Our <code>build.gradle</code> should be similar to:</p>

<p> <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'> <span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>     <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">classpath</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">gradle</span><span class="o">-</span><span class="nl">plugin:</span><span class="mf">1.2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'>         <span class="c1">// add spring-loaded dependency</span>
</span><span class='line'>         <span class="n">classpath</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">:</span><span class="nl">springloaded:</span><span class="mf">1.2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'> <span class="o">}&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt; apply plugin: &amp;lsquo;java&amp;rsquo;</span>
</span><span class='line'><span class="s"> // apply idea plugin</span>
</span><span class='line'><span class="s"> apply plugin: &amp;lsquo;idea&amp;rsquo;</span>
</span><span class='line'><span class="s"> apply plugin: &amp;lsquo;spring-boot&amp;rsquo;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="c1">// change default IntelliJ output directory for compiling classes</span>
</span><span class='line'> <span class="n">idea</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">module</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">inheritOutputDirs</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'>         <span class="n">outputDir</span> <span class="o">=</span> <span class="n">file</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">$buildDir</span><span class="s">/classes/</span><span class="n">main</span><span class="s">/&amp;rdquo;)</span>
</span><span class='line'><span class="s">     }</span>
</span><span class='line'><span class="s"> }          &lt;br/</span><span class="o">&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></p>

<p> To run <code>Spring Boot</code> application from <code>IntelliJ</code> IDE, we have to build project or compile single class file after change.
 We can press shortcut for <code>Build</code> -> <code>Make Project</code> and after build finishes, classes will gets reloaded by Spring Loaded.
 Another option is to record a macro for <code>Save All</code> and <code>Make Project</code> ( if you have disabled option for auto save all changes in modified files ) and map it to one shortcut, eg. <code>Ctrl + S</code>.</p>

<p> IntelliJ has also a feature called <code>Make Project Automatically</code>. If we enable this option, IntelliJ will compiles code automatically after few seconds.
 Unfortunately, this feature only works when application is not running / debugging inside the IDE.
 To make this works together, we must start the application outside the IDE.</p>

<p> So, if you want reloading system in running Spring Boot application that is not limited to HotSwap mechanism for free, then give Spring Loaded a try.
 Otherwise you may also check <a href="http://zeroturnaround.com/software/jrebel/">JRebel</a> ( not free ).
 In latest version 6.0, support for Spring Boot was added. JRebel also supports almost all major frameworks and application servers in Java ecosystem.</p>
]]></content>
  </entry>
  
</feed>
